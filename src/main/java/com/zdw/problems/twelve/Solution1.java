package com.zdw.problems.twelve;

import java.util.ArrayList;
import java.util.List;

/**
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * 
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 
 *   1: 1
 *   3: 1,3
 *   6: 1,2,3,6
 *  10: 1,2,5,10
 *  15: 1,3,5,15
 *  21: 1,3,7,21
 *  28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred divisors?
 * 
 * @author Zebulun
 *
 */

public class Solution1 {
	public static String comma = ", "; 
	
	public static void main(String[] args) {
		long count = 1;
		while(getFactors(triangleNumber(count)).size() < 501)
		{
			count++;
		}
		println(count);
	}
	
	public static void println(Object o)
	{
		System.out.println(o);
	}
	
	public static void print(Object o)
	{
		System.out.print(o);
	}
	
	public static long triangleNumber(long n)
	{
		if (n < 1) throw new IllegalArgumentException("Value is zero or less.");
		if (n == 1) return 1;
		return n + triangleNumber(n - 1);
	}

	public static boolean divisibleBy(long dividend, long divisor) 
	{
		return dividend % divisor == 0;
	}
	
	public static List<Long> getFactors(long n) 
	{
		List<Long> factors = new ArrayList<>();
		if ( n == 1 )
		{
			factors.add(1l);
			return factors;
		}
		for(long testFactor = 1; testFactor*testFactor <= n; testFactor++)
		{
			if (divisibleBy(n, testFactor))
			{
				factors.add(testFactor);
				factors.add(n / testFactor);
			}
		}
		println(factors);
		return factors;
	}
}
